
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.sql.Connection;
import static java.sql.DriverManager.getConnection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.TooManyListenersException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.comm.CommPortIdentifier;
import javax.comm.PortInUseException;
import javax.comm.SerialPort;
import javax.comm.SerialPortEvent;
import javax.comm.SerialPortEventListener;
import javax.comm.UnsupportedCommOperationException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;


/**
 *
 * @author Randy Meng
 * last update date 204-06-20
 */
public class currentPosition extends javax.swing.JFrame implements Runnable, SerialPortEventListener{
    
    //variables used to access databse MySQL
    Connection dbcon=null;
    Statement stmt=null;
    ResultSet rs=null;
    String dbName = "exoskeletondatabase?";
    String username="root";
    String password="Mengfanchao1124";
    String url = "jdbc:mysql://localhost:3306/"+dbName;
    
    //variables used to communicate with serial port
    static CommPortIdentifier portId;
    static Enumeration portList;
    InputStream inputStream;
    SerialPort serialPort;
    Thread readThread;
    Thread ethernetThread;
    
    //variables used to communicate with ethernet module
    private static final int serverPort=23;
    private OutputStream output;
    
    int connectionMethod=0;
    Socket clientSocket=null;
   
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
    
    public currentPosition() 
    {
        initComponents();
        
       try
       {
            //connect with databse and read the data
            dbcon = getConnection(url, username, password);
            stmt = dbcon.createStatement();
            rs = stmt.executeQuery("SELECT angleValue, motorCurrent, percentageoftorque FROM data_exoskeleton");
            rs.next();
            
            //display the latest data stored on the text fields
            while(rs.next())
            {
                angleText.setText(String.valueOf(rs.getFloat("angleValue")));
                motorText.setText(String.valueOf(rs.getFloat("motorCurrent")));
                percentageText.setText(String.valueOf(rs.getFloat("percentageoftorque")));
            }
        }catch(SQLException se)
        {
                //display error massage
                JOptionPane.showMessageDialog(this, "Unable to connect to CSIL SQL server. Please contact SFU helpdesk. Error message: " + se.getMessage());
        }
        //close the connection to databse
        finally
        {
            try{dbcon.close();} catch (SQLException ignore){}
            try{stmt.close();} catch (SQLException ignore){}
        }   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenu1 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        historyButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        disconnectButton = new javax.swing.JButton();
        portDisplay = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        percentageText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        motorText = new javax.swing.JTextField();
        angleText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        AgraphMonitoringButton = new javax.swing.JButton();
        CgraphMonitoringButton = new javax.swing.JButton();
        PgraphMonitoringButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        angleCom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        currentCom = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        perCom = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        IPText = new javax.swing.JTextField();
        ethernetButton = new javax.swing.JButton();
        ethernetDisconnect = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setText("EXOSKELETON #1");

        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        historyButton.setText("History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Port Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 153))); // NOI18N

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        disconnectButton.setText("disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        portDisplay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "", "" }));
        portDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portDisplayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(disconnectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(portDisplay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(searchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disconnectButton))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Current Position", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 0))); // NOI18N

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("% of Torque");

        percentageText.setEditable(false);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel3.setText("Motor Current");

        motorText.setEditable(false);

        angleText.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel2.setText("Angle Value");

        AgraphMonitoringButton.setText("Graph Monitoring");
        AgraphMonitoringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgraphMonitoringButtonActionPerformed(evt);
            }
        });

        CgraphMonitoringButton.setText("Graph Monitoring");
        CgraphMonitoringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CgraphMonitoringButtonActionPerformed(evt);
            }
        });

        PgraphMonitoringButton.setText("Graph Monitoring");
        PgraphMonitoringButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PgraphMonitoringButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(angleText, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(AgraphMonitoringButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(percentageText, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(motorText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CgraphMonitoringButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PgraphMonitoringButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(angleText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AgraphMonitoringButton))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(motorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CgraphMonitoringButton))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(percentageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(PgraphMonitoringButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Command", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 153, 0))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Angle Value");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel6.setText("Motor Current");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel7.setText("% of Torque ");

        sendButton.setText("send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentCom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(angleCom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perCom, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(angleCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(currentCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(perCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ethernet Option", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 153))); // NOI18N

        ethernetButton.setText("Connect");
        ethernetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ethernetButtonActionPerformed(evt);
            }
        });

        ethernetDisconnect.setText("disconnect");
        ethernetDisconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ethernetDisconnectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IPText)
                    .addComponent(ethernetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ethernetDisconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(IPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ethernetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ethernetDisconnect)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(historyButton)
                                .addGap(40, 40, 40)
                                .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(historyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        //start the history display windows when the history button pressed
        historyDisplay hd = new historyDisplay();
        hd.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_historyButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // back to the formal exoskeleton windows when back button pressed
        exoskeletonSelect es = new exoskeletonSelect();
        es.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        //search the available ports that are using by devices and display them in the combo box
        java.util.Enumeration<CommPortIdentifier> portEnum = CommPortIdentifier.getPortIdentifiers();
        int i = 0;
        String[] r = new String[5];

        //check the using ports
        while (portEnum.hasMoreElements() && i < 5) 
        {
            CommPortIdentifier portIdentifier = portEnum.nextElement();
            r[i] = portIdentifier.getName();
            i++;
        }
        
        //display them in combo box
        portDisplay.setModel(new javax.swing.DefaultComboBoxModel(r));
    }//GEN-LAST:event_searchButtonActionPerformed

    private void portDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portDisplayActionPerformed
        // start reading data from them port selected
        Object selectedItem = portDisplay.getSelectedItem();
        String com = selectedItem.toString();
        SimpleRead(com); 
        connectionMethod=1;
    }//GEN-LAST:event_portDisplayActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        // clear the commands and close the using port
        serialPort.close();
        angleCom.setText(null);
        currentCom.setText(null);
        perCom.setText(null);
        connectionMethod=0;
    }//GEN-LAST:event_disconnectButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // call senddata method or function to send the commands while sendbutton pressed
        sendData(angleCom.getText()+'a'+currentCom.getText()+'c'+perCom.getText()+'p');
    }//GEN-LAST:event_sendButtonActionPerformed

    @SuppressWarnings("empty-statement")
    
    private void ethernetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ethernetButtonActionPerformed
        
        String serverAddress=IPText.getText();
        ethernetConnection(serverAddress);
    }//GEN-LAST:event_ethernetButtonActionPerformed

    public void ethernetConnection(String IP)
    {
        // connect to the device based on the ip address entered by user 
        //send a request to device and read the response to display 
        
        //********the wifi shield can also use this method to read data, no differences
        connectionMethod=2;
        //mag to send to server
        String msgToServer;
        //msg received from server
        String msgFromServer = null;
        //ip address of the device depending on the local network
        String serverIP=IPText.getText();
        //Socket clientSocket=null; 
        
        //connect to the device based on the ip address
        try {
            clientSocket = new Socket(serverIP, serverPort);
        } catch (IOException ex) {
            Logger.getLogger(currentPosition.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //print out the connection details and information
        System.out.println("Connected to:"+serverIP+" on port:"+serverPort);
        
        //OutputStream to Arduino-Server
        DataOutputStream outToServer = null;
        try {
            outToServer = new DataOutputStream(clientSocket.getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(currentPosition.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //BufferedReader from Arduino-Server
        BufferedReader inFromServer = null;
        try {
            inFromServer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream())); //
        } catch (IOException ex) {
            Logger.getLogger(currentPosition.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Message tha will be sent and the device will send data back 
        msgToServer = "1";
        try {
            outToServer.writeBytes(msgToServer+'\n');//sending the message
        } catch (IOException ex) {
            Logger.getLogger(currentPosition.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //print out the mag sent to server
        System.out.println("sending to Arduino-Server: "+msgToServer);
        
        //in this case, device will send four data line by line, so a for loop need to be created
        for(int count=0; count<4;count++)
        {
            //read data line by line
            try {
                msgFromServer=inFromServer.readLine();
            } catch (IOException ex) {
                Logger.getLogger(currentPosition.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //print out the msg recieved from server
            System.out.println("recieved from Arduino-Server: " + msgFromServer);
            
            //display the recieved data 
            if(count==1)
               angleText.setText(msgFromServer); 
            if(count==2)
               motorText.setText(msgFromServer); 
            if(count==3)
               percentageText.setText(msgFromServer);
        }
        
        ethernetThread=new Thread(this);
        ethernetThread.start();
    }
    
    private void AgraphMonitoringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgraphMonitoringButtonActionPerformed
        // creat frame plot 
        JFrame frame = new JFrame("Graph Monitoring Screen");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        //create the chart that used to draw the plot
        final realtimeGraph chart = new realtimeGraph("Angle Value");
        frame.add(chart);
        frame.pack();
        
        //add timer method to the plot to update the plot which can make a real-time graphing
        Timer timer = new Timer(1500, new ActionListener() {
                    private boolean b;

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            chart.update(b ? 1 : 0,1);
                        } catch (SQLException ex) {
                            Logger.getLogger(realtimeGraph.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        b = !b;
                    }
                });
        timer.start();
        frame.setVisible(true);
    }//GEN-LAST:event_AgraphMonitoringButtonActionPerformed

    private void CgraphMonitoringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CgraphMonitoringButtonActionPerformed
        
        JFrame frame = new JFrame("Graph Monitoring Screen");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        final realtimeGraph chart = new realtimeGraph("Motor Current");
        frame.add(chart);
        frame.pack();
        Timer timer = new Timer(1500, new ActionListener() {
                    private boolean b;

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            chart.update(b ? 1 : 0,2);
                        } catch (SQLException ex) {
                            Logger.getLogger(realtimeGraph.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        b = !b;
                    }
                });
        timer.start();
        frame.setVisible(true);
    }//GEN-LAST:event_CgraphMonitoringButtonActionPerformed

    private void PgraphMonitoringButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PgraphMonitoringButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Graph Monitoring Screen");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        final realtimeGraph chart = new realtimeGraph("% of Max Torque Applied");
        frame.add(chart);
        frame.pack();
        Timer timer = new Timer(1500, new ActionListener() {
                    private boolean b;

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            chart.update(b ? 1 : 0,3);
                        } catch (SQLException ex) {
                            Logger.getLogger(realtimeGraph.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        b = !b;
                    }
                });
        timer.start();
        frame.setVisible(true);
    }//GEN-LAST:event_PgraphMonitoringButtonActionPerformed

    private void ethernetDisconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ethernetDisconnectActionPerformed
        // TODO add your handling code here:
        connectionMethod=0;
        angleCom.setText(null);
        currentCom.setText(null);
        perCom.setText(null);
        try {
            clientSocket.close();
        } catch (IOException ex) {
            Logger.getLogger(currentPosition.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ethernetDisconnectActionPerformed

    //function tht can send commands to the device through serial port
    private void sendData(String data) {
        if(connectionMethod==1)
        {
        try {
            System.out.println("Sending data: '" + data +"'");
            output = serialPort.getOutputStream();
            output.write( data.getBytes() );   
        }catch (Exception e) 
        {
            System.err.println(e.toString());
            System.exit(0);
        }
        }
        else if(connectionMethod==2)
        {}
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(currentPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(currentPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(currentPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(currentPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new currentPosition().setVisible(true);
        });
    }

    //method that can read data from serial port
    public void SimpleRead(String com) {
        
        //get the list of ports using by any device
        portList = CommPortIdentifier.getPortIdentifiers();

        while (portList.hasMoreElements()) { 
            portId = (CommPortIdentifier) portList.nextElement(); 
            if (portId.getPortType() == CommPortIdentifier.PORT_SERIAL) {
                if (portId.getName().equals(com)) 
                {
                    try {
                        serialPort = (SerialPort) portId.open("SimpleReadApp", 2000);
                    } catch (PortInUseException e) {
                        System.out.println(e);
                    }
                    try {
                        inputStream = serialPort.getInputStream();
                    } catch (IOException e) {
                        System.out.println(e);
                    }
                    try {
                        serialPort.addEventListener(this);
                    } catch (TooManyListenersException e) {
                        System.out.println(e);
                    }
                    serialPort.notifyOnDataAvailable(true);
                    try {
                        serialPort.setSerialPortParams(9600,
                                SerialPort.DATABITS_8,
                                SerialPort.STOPBITS_1,
                                SerialPort.PARITY_NONE);
                    } catch (UnsupportedCommOperationException e) {
                        System.out.println(e);
                    }
                    readThread = new Thread(this);
                    readThread.start();
                }
            }
        }

    }

    @Override
    public void run() {
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            System.out.println(e);
        }
    }

    @Override
    public void serialEvent(SerialPortEvent event) 
    {
        //monitoring the serial port communication
        switch (event.getEventType()) 
        {
            case SerialPortEvent.BI:
            case SerialPortEvent.OE:
            case SerialPortEvent.FE:
            case SerialPortEvent.PE:
            case SerialPortEvent.CD:
            case SerialPortEvent.CTS:
            case SerialPortEvent.DSR:
            case SerialPortEvent.RI:
            case SerialPortEvent.OUTPUT_BUFFER_EMPTY:
                break;
                
            case SerialPortEvent.DATA_AVAILABLE:
                
                //buffer to store the recieved data
                byte[] readBuffer = new byte[15];
                //read data when there are data to read
                try {
                    waiting(1);
                    while (inputStream.available()>0) {
                        inputStream.read(readBuffer);
                    }
                //store the buffer data to a string which is more easily to display
                String y = new String(readBuffer);
                
                //check if the data is complete
                if(readBuffer[0]=='s')
                {
                    angleText.setText(y.substring(1, 5));
                    motorText.setText(y.substring(6, 9));
                    percentageText.setText(y.substring(10, 14));
                    java.util.Date date= new java.util.Date();
                    String folderName = formatter.format(date.getTime());
                    //write the data into databse
                    try
                    {
                        dbcon = getConnection(url, username, password);
                        stmt = dbcon.createStatement();
                        stmt.executeUpdate("INSERT INTO data_exoskeleton (recordTime ,angleValue, motorCurrent, percentageoftorque) VALUES ( '"+folderName+"','"+Float.parseFloat(angleText.getText())+"','"+Float.parseFloat(motorText.getText())+"','"+Float.parseFloat(percentageText.getText())+"')");
                        //stmt.executeUpdate("INSERT INTO dateread (time) VALUES ( '"+folderName+"')");
                    }
                    catch(SQLException se)
                    {
                        JOptionPane.showMessageDialog(this, "Unable to connect to CSIL SQL server. Please contact SFU helpdesk. Error message: " + se.getMessage());
                    }
                    
                }
                    //waiting(1);
                } 
                catch (IOException e) 
                {
                    System.out.println(e);
                }
                break;
        }
    }

    //waiting method that can delay the progress 
    public static void waiting(int n) {

        long t0, t1;

        t0 = System.currentTimeMillis();

        do {
            t1 = System.currentTimeMillis();
        } while ((t1 - t0) < (n * 1000));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgraphMonitoringButton;
    private javax.swing.JButton CgraphMonitoringButton;
    private javax.swing.JTextField IPText;
    private javax.swing.JButton PgraphMonitoringButton;
    private javax.swing.JTextField angleCom;
    private javax.swing.JTextField angleText;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField currentCom;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton ethernetButton;
    private javax.swing.JButton ethernetDisconnect;
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField motorText;
    private javax.swing.JTextField perCom;
    private javax.swing.JTextField percentageText;
    private javax.swing.JComboBox portDisplay;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables
}
